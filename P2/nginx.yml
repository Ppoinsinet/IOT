# To deploy: kubectl create -f nginx-hello-world-deployment.yaml
# Access it with the API as a proxy:
# $ kubectl proxy
# Then in you browser: http://localhost:8001/api/v1/namespaces/default/services/nginx:/proxy/#!/

# APP ONE
apiVersion: v1
kind: Service
metadata:
  name: app-one
spec:
  type: NodePort
  ports:
  - port: 80
    targetPort: 80
    nodePort: 30001
  selector:
    app: app-one
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-one-config
data:
  nginx.conf: '
    user nginx;
    worker_processes  1;
    events {
      worker_connections  10240;
    }
    http {
      server {
          listen       80;
          server_name  localhost;
          location / {
            return 200 "Hello from app one!";
        }
      }
    }
'
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-one
spec:
  selector:
    matchLabels:
      app: app-one
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: app-one
    spec:
      containers:
      - image: nginx:latest
        name: nginx
        ports:
        - containerPort: 80
          name: web
        volumeMounts:
          - name: config-vol
            mountPath: /etc/nginx/nginx.conf
            subPath: nginx.conf
            readOnly: true
      volumes:
        - name: config-vol
          configMap:
            name: app-one-config
            items:
              - key: nginx.conf
                path: nginx.conf
---

# APP TWO
apiVersion: v1
kind: Service
metadata:
  name: app-two
spec:
  type: NodePort
  ports:
  - port: 80
    targetPort: 80
    nodePort: 30002
  selector:
    app: app-two
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-two-config
data:
  nginx.conf: '
    user nginx;
    worker_processes  1;
    events {
      worker_connections  10240;
    }
    http {
      server {
          listen       80;
          server_name  localhost;
          location / {
            return 200 "Hello from app two!";
        }
      }
    }
'
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-two
spec:
  replicas: 3
  selector:
    matchLabels:
      app: app-two
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: app-two
    spec:
      containers:
      - image: nginx:latest
        name: nginx
        ports:
        - containerPort: 80
          name: web
        volumeMounts:
          - name: config-vol
            mountPath: /etc/nginx/nginx.conf
            subPath: nginx.conf
            readOnly: true
      volumes:
        - name: config-vol
          configMap:
            name: app-two-config
            items:
              - key: nginx.conf
                path: nginx.conf
---


# APP THREE
apiVersion: v1
kind: Service
metadata:
  name: app-three
spec:
  type: NodePort
  ports:
  - port: 80
    targetPort: 80
    nodePort: 30003
  selector:
    app: app-three
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-three-config
data:
  nginx.conf: '
    user nginx;
    worker_processes  1;
    events {
      worker_connections  10240;
    }
    http {
      server {
          listen       80;
          server_name  localhost;
          location / {
            return 200 "Hello from app three!";
        }
      }
    }
'
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-three
spec:
  selector:
    matchLabels:
      app: app-three
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: app-three
    spec:
      containers:
      - image: nginx:latest
        name: nginx
        ports:
        - containerPort: 80
          name: web
        volumeMounts:
          - name: config-vol
            mountPath: /etc/nginx/nginx.conf
            subPath: nginx.conf
            readOnly: true
      volumes:
        - name: config-vol
          configMap:
            name: app-three-config
            items:
              - key: nginx.conf
                path: nginx.conf
